###########################################################
# This Blueprint installs the nodecellar application
# on an openstack cloud environment.
###########################################################

tosca_definitions_version: cloudify_dsl_1_0

imports:
  - http://www.getcloudify.org/spec/cloudify/3.2.1/types.yaml
  - plugins/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.2.1/plugin.yaml
  - types/nodecellar.yaml


#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.json
#####################################################################################

inputs:
    subscription_id:
        type: string
    username:
        type: string
    password:
        default: 'Azerty@01'
        type: string
    location:   
        default: 'westeurope'
        type: string
    publisher_name:
        default: 'Canonical'
        type: string
    offer:
        default: 'UbuntuServer'
        type: string
    sku:
        default: 12.04.5-LTS
        type: string
    version:
        default: 'latest'
        type: string
    flavor_id:
        default: 'Standard_A1'
        type: string
    compute_name:
        type: string
    virtual_network_name:
        type: string
    subnet_name:
        type: string
    storage_account_name:
        type: string
    compute_user:
        default: 'administrateur'
        type: string
    compute_password:
        default: 'Azerty?01'
        type: string
    public_key:
        type: string
    resource_group_name:
        type: string
        
node_types:

  ###########################################################
  # We define a type that inherits openstack's default
  # server, and adds monitoring capabillities on top of it.
  ###########################################################

  nodecellar.nodes.MonitoredServer:
    derived_from: cloudify.azure.nodes.Instance
    properties:
      cloudify_agent:
        default:
          user: { get_input: compute_user }
    interfaces:

      ###########################################################
      # We are infact telling cloudify to install a diamond
      # monitoring agent on the server.
      #
      # (see https://github.com/BrightcoveOS/Diamond)
      ###########################################################

      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall

      ###########################################################
      # Adding some collectors. These collectors are necessary
      # for the Cloudify UI to display the deafult metrics.
      ###########################################################

      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

node_templates:

  mongod_host:
    type: nodecellar.nodes.MonitoredServer
    properties:
      subscription_id: { get_input: subscription_id }
      username: { get_input: username }
      password: { get_input: password }
      location: { get_input: location }
      publisher_name: { get_input: publisher_name }
      offer: { get_input: offer }
      sku: { get_input: sku }
      version: { get_input: version }
      flavor_id: { get_input: flavor_id }
      compute_name: mongod-host
      virtual_network_name: { get_input: virtual_network_name}
      subnet_name: { get_input: subnet_name }
      storage_account_name: {get_input: storage_account_name}
      compute_user: {get_input: compute_user}
      compute_password: {get_input: compute_password}
      resource_group_name: {get_input: resource_group_name}
      public_key: { get_input: public_key }

  nodejs_host:
    type: nodecellar.nodes.MonitoredServer
    properties:
      subscription_id: { get_input: subscription_id }
      username: { get_input: username }
      password: { get_input: password }
      location: { get_input: location }
      publisher_name: { get_input: publisher_name }
      offer: { get_input: offer }
      sku: { get_input: sku }
      version: { get_input: version }
      flavor_id: { get_input: flavor_id }
      compute_name: nodejs-host
      virtual_network_name: { get_input: virtual_network_name}
      subnet_name: { get_input: subnet_name }
      storage_account_name: {get_input: storage_account_name}
      compute_user: {get_input: compute_user}
      compute_password: {get_input: compute_password}
      resource_group_name: {get_input: resource_group_name}
      public_key: { get_input: public_key }

  mongod:
    type: nodecellar.nodes.MongoDatabase
    properties:
      port: 27017
    interfaces:
      cloudify.interfaces.lifecycle:

        ###########################################################
        # The MongoDBCollector depends on a python library called
        # pymongo. We install this library in the 'configure'
        # lifecycle hook of this node.
        ###########################################################

        configure: scripts/mongo/install-pymongo.sh

      ###########################################################
      # Notice that this node defines an additional collector
      # to collect data on the MongoDB.
      ###########################################################

      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                MongoDBCollector:
                  config:
                    hosts: "localhost:27017"
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    properties:
      port: 8080
    relationships:

      ################################
      # Setting the mongo connection
      ################################

      - type: node_connected_to_mongo
        target: mongod

      ################################
      # Setting the nodejs connection
      ################################

      - type: node_contained_in_nodejs
        target: nodejs

###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ nodejs_host, ip ] }
      port: { get_property: [ nodecellar, port ] }
